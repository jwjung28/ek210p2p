/*
  IR Receiver (pin 4) + I2C LCD (SDA=A4, SCL=A5) status test
  - Most 38 kHz IR receivers idle HIGH and go LOW when carrier is present.
    If yours is opposite, set ACTIVE_LOW = false.

  LCD address: commonly 0x27 or 0x3F. Change below if needed.
*/

#include <Wire.h>
#include <LiquidCrystal_I2C.h>

const uint8_t  RX_PIN           = 4;          // <-- your receiver on D4
const bool     ACTIVE_LOW       = true;       // true: LOW means carrier present
const unsigned SAMPLE_MS        = 100;        // update cadence
const unsigned DETECT_WIN_US    = 20000;      // look for any pulse within 20 ms

LiquidCrystal_I2C lcd(0x27, 16, 2);           // change 0x27 -> 0x3F if needed

enum SigState { SIG_NONE = 0, SIG_PRESENT = 1 };
SigState lastShown = SIG_NONE;

void setup() {
  Serial.begin(115200);

  pinMode(RX_PIN, INPUT_PULLUP);  // many demodulators are open-collector

  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("IR Status:");
  lcd.setCursor(0, 1);
  lcd.print("Initializing...");

  delay(200);
  Serial.println("IR + LCD test (RX=D4) starting...");
}

void loop() {
  unsigned long t0 = millis();

  // Detect any “carrier-present” pulse within the short window
  unsigned long width = pulseIn(RX_PIN, ACTIVE_LOW ? LOW : HIGH, DETECT_WIN_US);
  bool receiving = (width > 0);

  // Serial log each cycle
  Serial.println(receiving ? "receiving" : "no signal");

  // LCD only updates on change to prevent flicker
  SigState now = receiving ? SIG_PRESENT : SIG_NONE;
  if (now != lastShown) {
    lcd.setCursor(0, 0);
    lcd.print("IR Status:       ");  // clear line padding
    lcd.setCursor(0, 1);
    if (receiving) {
      lcd.print("Received         ");
    } else {
      lcd.print("No signal        ");
    }
    lastShown = now;
  }

  // Hold total loop near 100 ms
  while (millis() - t0 < SAMPLE_MS) { /* wait */ }
}

