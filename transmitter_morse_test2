// Morse TX test: send "A", 2s silence, "B", 2s silence, repeat
// Gates a 38 kHz carrier using tone(). Use a transistor driver + series resistor for the IR LED.

const uint8_t  TX_PIN      = 3;        // any pin supported by tone()
const uint16_t CARRIER_HZ  = 38000;    // 38 kHz for typical IR demodulating receivers
const uint16_t UNIT_MS     = 120;      // Morse time unit (match your receiver)

// ---------- Low-level carrier control ----------
inline void carrierOn()  { tone(TX_PIN, CARRIER_HZ); }
inline void carrierOff() { noTone(TX_PIN); }

// ---------- Morse element helpers ----------
void sendDot() {
  carrierOn();
  delay(UNIT_MS * 1);     // dot = 1 unit ON
  carrierOff();
  delay(UNIT_MS * 1);     // intra-element gap = 1 unit OFF
}

void sendDash() {
  carrierOn();
  delay(UNIT_MS * 3);     // dash = 3 units ON
  carrierOff();
  delay(UNIT_MS * 1);     // intra-element gap = 1 unit OFF
}

// After the last element of a letter we owe a total of 3 units OFF.
// Since each element already ended with 1 unit OFF, add 2 more here.
void letterGap() {
  delay(UNIT_MS * 2);
}

// Hard silence helper that guarantees the carrier is OFF for a fixed ms
void silenceMs(uint16_t ms) {
  carrierOff();
  delay(ms);
}

// Generic sender for a Morse pattern like ".-" or "-..."
void sendPattern(const char* pattern) {
  // Send each element with proper intra-element gaps handled in sendDot/sendDash
  for (const char* p = pattern; *p; ++p) {
    if (*p == '.') {
      sendDot();
    } else if (*p == '-') {
      sendDash();
    }
  }
  // End of letter
  letterGap();
}

void setup() {
  pinMode(TX_PIN, OUTPUT);
  carrierOff();           // make sure we're dark before starting
  delay(500);             // brief pause
}

void loop() {
  // Send "A" (.-)
  sendPattern(".-");
  silenceMs(2000);        // 2 seconds off

  // Send "B" (-...)
  sendPattern("-...");
  silenceMs(2000);        // 2 seconds off
}
